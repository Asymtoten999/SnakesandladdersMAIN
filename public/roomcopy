socket.on("moveData", (moveData, direction, turn) => {
  console.log(turn);
  return new Promise(async (resolve, reject) => {
    if (direction == "up") {
      document.getElementById(`${turn}`).style.marginTop = moveData;
    } else if (direction == "right") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    } else if (direction == "left") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    }

    await new Promise((resolve) => setTimeout(resolve, 400));
    if (turn == "Blue") {
      document.getElementById("activeToken").innerHTML = "Red's turn";
    } else if (turn == "Red") {
      document.getElementById("activeToken").innerHTML = "Blue's turn";
    }
    resolve();
  });
});

socket.on("moveData", (moveData, direction, turn) => {
  turn = "Red";
  return new Promise(async (resolve, reject) => {
    if (direction == "up") {
      document.getElementById(`${turn}`).style.marginTop = moveData;
    } else if (direction == "right") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    } else if (direction == "left") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    }

    await new Promise((resolve) => setTimeout(resolve, 400));
    if (turn == "Blue") {
      document.getElementById("activeToken").innerHTML = "Red's turn";
    } else if (turn == "Red") {
      document.getElementById("activeToken").innerHTML = "Blue's turn";
    }
    resolve();
  });
});

socket.off("orderData", (orderData) => {
  document.getElementById("Red").style.backgroundColor = "Blue";
  document.getElementById("Blue").style.backgroundColor = "Red";
  document.getElementById("Red").style.left = "2.2vw";
  document.getElementById("Blue").style.left = "0.25vw";
  console.log(orderData);
});

<div class="playerRed" id="Red"></div>



socket.on("SnLData", (froms, tos, turn) => {
  return new Promise(async (resolve, reject) => {
    for (let i = 0; i < tos.length; i++) {
      if (marginLeft() == froms[i][0] && marginTop() == froms[i][1]) {
        document.getElementById(`${turn}`).style.marginLeft = `${tos[i][0]}vh`;
        document.getElementById(`${turn}`).style.marginTop = `${tos[i][1]}vh`;
        await new Promise((resolve) => setTimeout(resolve, 400));
        break;
      }
    }

    resolve();
  });
  function marginLeft() {
    return Number(
      document.getElementById(`${turn}`).style.marginLeft.split("v")[0]
    );
  }

  function marginTop() {
    return Number(
      document.getElementById(`${turn}`).style.marginTop.split("v")[0]
    );
  }
});




socket.on("moveData", (moveData, direction, turn) => {
  turn = "Red";
  

  return new Promise(async (resolve, reject) => {
    if (direction == "up") {
      document.getElementById(`${turn}`).style.marginTop = moveData;
    } else if (direction == "right") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    } else if (direction == "left") {
      document.getElementById(`${turn}`).style.marginLeft = moveData;
    }

    await new Promise((resolve) => setTimeout(resolve, 400));

    resolve();
  });
  
});

let start;
startBut.addEventListener("click", function() {
  socket.emit("startMes", start)
});

/ Get your player number
socket.on("player-number", (num) => {
  if (num === -1) {
    infoDisplay.innerHTML = "Sorry, the server is full";
  } else {
    playerNum = parseInt(num);
  }
  if (playerNum === 1) {
    document.getElementById("startBut").style.display = "none";
    document.getElementById("lecSelect").style.display = "none";
    startBut.onclick = console.log(playerNum);
  }
});

socket.on("startData", (startData) => {
  document.getElementById("diceRoll").disabled = false;
  document.getElementById("diceRoll").style.backgroundColor =
    "rgb(239, 235, 143)";
  document.getElementById("activeToken").innerHTML = "Your turn!";
  document.getElementById("activeToken").style.color = "blue";
});


if ((num = 0)) {
  console.log(num);
  socket.on("roomUsers", ({ room, users }) => {
    outputRoomName(room);
    outputUsers(users);
  });
  playerNum = parseInt(num);
} else if ((num = 1)) {
  console.log(num);
  socket.on("roomUsers", ({ room, users }) => {
    outputRoomName(room);
    outputUsers(users);
  });
  playerNum = parseInt(num);
}



socket.on("joinRoom", ({ username, room }) => {
  const user = userJoin(socket.id, username, room);

  socket.join(user.room);

  // Send users and room info

  io.to(user.room).emit("roomUsers", {
    room: user.room,
    users: getRoomUsers(user.room),
  });
});

// Tell the connecting client what player number they are
socket.emit("player-number", playerIndex);

console.log(`Player ${playerIndex} has connected`);

// Ignore player 3
if (playerIndex === -1) return;

connections[playerIndex] = false;

socket.on("roll", (rollValue) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("rollData", rollValue);
});

socket.on("turnValue", (turn) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("turnData", turn);
});

socket.on("move", (moveValue, direction, turn) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("moveData", moveValue, direction, turn);
});

socket.on("order", (moveValue) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("orderData", moveValue);
});

socket.on("buttonToggle", (buttonValue) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("buttonData", buttonValue);
});

socket.on("SnL", (froms, tos, turn, newLeft, newTop) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("SnLData", froms, tos, turn, newLeft, newTop);
});

socket.on("startMes", (start) => {
  const user = getCurrentUser(socket.id);

  socket.to(user.room).emit("startData", start);
});

// Runs when client disconnects
socket.on("disconnect", () => {
  const user = userLeave(socket.id);
  console.log("A Ws has disconnected...");
  console.log(`Player ${playerIndex} disconnected`);
  connections[playerIndex] = null;

  // Send users and room info
  io.to(user.room).emit("roomUsers", {
    room: user.room,
    users: getRoomUsers(user.room),
  });
});